# Importaci칩n de librerias 
import streamlit as st
import joblib
import pandas as pd
from sklearn.preprocessing import StandardScaler

# Configurar la p치gina principal
st.set_page_config(
    page_title="Sistema de Veh칤culos Eficientes",
    page_icon="游뚱",
    layout="centered",
)
# Inicializar el estado de la sesi칩n
if 'page' not in st.session_state:
    st.session_state.page = 'Portada'

# Funci칩n para mostrar la p치gina de presentaci칩n
def mostrar_Modelos():
    st.session_state.page = 'Portada'

# Funci칩n para mostrar la p치gina del ML1
def mostrar_Modelo_1():
    st.session_state.page = 'Eficiencia_E'

# Funci칩n para mostrar la p치gina del ML2
def mostrar_Modelo_2():
    st.session_state.page = 'Costo_O'

# Crear botones para cambiar de p치gina
col1, col2, col3 = st.columns([1, 1, 1])
with col1:
    if st.button('Portada'):
        mostrar_Modelos()

with col2:
    if st.button('Eficiencia_E'):
        mostrar_Modelo_1()

with col3:
    if st.button('Costo_O'):
        mostrar_Modelo_2()
# CSS para estilizar los botones
st.markdown("""
    <style>
    .stButton>button {
        background-color: #333333;
        color: white;
        border: none;
        padding: 10px 24px;
        text-align: center;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        transition-duration: 0.4s;
        border-radius: 12px;
    }
    .stButton>button:hover {
        background-color: white;
        color: black;
        border: 2px solid #333333;
    }
    </style>
    """, unsafe_allow_html=True)
# Mostrar la p치gina correspondiente
#Pagina inicial
if st.session_state.page == 'Portada':
     st.markdown("""
    <style>
    .titulo-portada {
        font-size: 50px;
        color: #FFFFFF; /* Cambia el color del t칤tulo */
        font-weight: bold;
        text-align: center; /* Centrar el t칤tulo */
        padding: 20px; /* Espaciado */
        background-color: #000000; /* Fondo detr치s del t칤tulo */
        border-radius: 10px; /* Bordes redondeados */
        box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.2); /* Sombra para darle m치s profundidad */
    }
    </style>
    <div class="titulo-portada">
        Bienvenidos a la Plataforma de Veh칤culos Eficientess
    </div>
    """, unsafe_allow_html=True)
     st.write("""
        Esta plataforma utiliza dos modelos de machine learning para optimizar la eficiencia de veh칤culos y maximizar ahorros operativos. 
        Explore cada modelo para obtener predicciones personalizadas sobre los veh칤culos.
     """)
     st.markdown("""
      <h2 style='text-align: center;'>Modelo de eficiencia energ칠tica</h2>
      """, unsafe_allow_html=True)
     st.write("""
     Para el modelo de eficiencia energ칠tica se optiene como resultado 5 veh칤culos altamente eficientes en conceptos como es el gasto de combustible, costo de combustible y produccci칩n de CO2, de esta manera se va a tomar la mejor decici칩n a la hora de agregar un nuevo veh칤culo a la flota que priorice bajos costos en combustible y ademas sea amigable con el medio ambiente
     """)
     st.image('https://fullandfast.com/blog/wp-content/uploads/2020/03/uber-vehiculo-electrico.jpg', caption="Amigables con el planeta", width=300)
     st.markdown("""
      <h2 style='text-align: center;'>Modelo de maximizaci칩n operativa y preventa de veh칤culo</h2>
      """, unsafe_allow_html=True)
     st.write("""
     Para el modelo de maximizaci칩n operativa y preventa de veh칤culo se tiene como objetivo dos predicciones, la primera donde podemos encontrar una gama de veh칤culos con los menores gastos operativos, apartir de esto se puede tomar una deciones de costo y beneficio a largo plazo, por ultimo tenemos un modelo que predice la preventa de un veh칤culo, lo cual nos permite saber que tan balorizado esta y de esta manera tomar la mejor decici칩n a la hora de vender
     """)
     st.image('https://www.redeweb.com/wp-content/uploads/2017/06/04_1881685204.jpg', caption="Pensando en tu economia", width=300)
     


    # Pagina del modelo 1
elif st.session_state.page == 'Eficiencia_E':
    #Segundo modelo de ML1 
    # Imagen de la empresa
    # Definir estilo CSS personalizado para el logotipo
    st.markdown("""
       <style>
       .image-container {
        text-align: center;
        margin-top: 20px;
        margin-bottom: 40px;
    }
    .image-container img {
        width: 150px;  /* Ajustar el tama침o de la imagen */
        border-radius: 50%;  /* Hacerla circular */
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);  /* A침adir sombra */
    }
    </style>
    <div class="image-container">
        <img src="https://pbs.twimg.com/profile_images/1042867341476995078/antCC8gJ_400x400.jpg" alt="Logo">
    </div>
    """, unsafe_allow_html=True)

    # Cargamos el modelo guardado 
    modelo_ML1 = joblib.load('./Modelos_ML/Modelo_ML1.joblib')
    # Cargamos el dataset
    df_Vehiculos = pd.read_parquet('./Data/df_vfed.parquet')
    df_Vehiculos_N = df_Vehiculos[df_Vehiculos['Year'] > 2010]
    df_Vehiculos_F = df_Vehiculos_N[df_Vehiculos_N['CO2 (p/mile)'] >= 0]
    # Realizamos una funci칩n para categorizar los veh칤culos
    def categorizar_vehiculos(row):
       if row['Alternative Fuel'] == 'Electricity':
           return 'H칤brido'
       elif row['Fuel'] == 'Electricity':
           return 'El칠ctrico'
       elif row['Alternative Fuel'] in ['E85', 'No'] and row['Fuel'] != 'Natural Gas' and row['CO2 (p/mile)'] > 0:
           return 'Comvencional'
       else:
           return 'Gas'    
    # Aplicamos la funci칩n 
    df_Vehiculos_F['Categoria'] = df_Vehiculos_F.apply(categorizar_vehiculos, axis=1)
    #  Creamos una columna unica 
    df_Vehiculos_F['Veh칤culo_unico'] = df_Vehiculos_F['Manufacturer'] + ' ' + df_Vehiculos_F['Model']+ ' ' + df_Vehiculos_F['Year'].astype(str)
    # 2P
    #Obtenemos las marcas de los veh칤culos 
    Marcas = df_Vehiculos_F['Manufacturer'].unique().tolist()
    # Agregamos Todos 
    Marcas.insert(0, 'Todos')
    #Creamos una lista de los a침os
    anios_unicos = list(range(2011, 2024))
    # Agregamos unicos
    anios_unicos.insert(0, 'Todos')
    # Titulo 
    st.title("An치lisis de Eficiencia de Veh칤culos")
    st.write("Bienvenido a la plataforma de an치lisis de eficiencia energ칠tica para veh칤culos.")

    # Entrada de usuario: a침o y fabricante
    a침o = st.selectbox('Seleccione el a침o del Veh칤culo', anios_unicos, help="Elige un a침o de la lista")
    fabricante = st.selectbox('Seleccione la marca del veh칤culo', Marcas, help="Elige una marca de veh칤culo")

    # Boton para ejecutar la predicci칩n
    if st.button('Obtener recomendacion'):
        # Condici칩n si el usuario escoge tanto el a침o como el fabricante
        if a침o != 'Todos' and fabricante != 'Todos':
             # Filtrar vehiculos por a침o y fabricante
             Vehiculos_filtrado = df_Vehiculos_F[(df_Vehiculos_F['Year'] == a침o) & (df_Vehiculos_F['Manufacturer'] == fabricante)]
             # Verificar si hay veh칤culos que cumplar con esta condici칩n 
             if len(Vehiculos_filtrado) > 0:
                  #Estandarizamos las caracteristicas
                  X = Vehiculos_filtrado[['Year', 'Miles per gallon (mpg)', 'CO2 (p/mile)', 'FuelCost']]
                  scaler = StandardScaler()
                  X_scaled = scaler.fit_transform(X)
                  # Hacemos las predicciones con el modelo 
                  predicciones = modelo_ML1.predict(X_scaled)
                  # A침adimos las predicciones al dataframe
                  Vehiculos_filtrado['Eficiencia'] = predicciones
                  # Ordenas por eficiencia de mayor a menor
                  vehiculos_recomendados = Vehiculos_filtrado.sort_values(by='Eficiencia', ascending=False).head(5)
                  st.session_state['dataset'] = vehiculos_recomendados
                  # Mostrar los 5 veh칤culos recomendados 
                  st.write('Los 5 veh칤culos mas eficientes energeticamente son:')
                  st.dataframe(vehiculos_recomendados[['Year', 'Veh칤culo_unico']])
             else: 
                   st.write('No se encontraron veh칤culos que cumplan con ese citerio')
        # Condici칩n si solo escoge al fabricante
        elif fabricante != 'Todos' and a침o == 'Todos':
             # Filtrar vehiculos por fabricante
             Vehiculos_filtrado = df_Vehiculos_F[df_Vehiculos_F['Manufacturer'] == fabricante]
             # Verificar si hay veh칤culos que cumplar con esta condici칩n 
             if len(Vehiculos_filtrado) > 0:
                   #Estandarizamos las caracteristicas
                   X = Vehiculos_filtrado[['Year', 'Miles per gallon (mpg)', 'CO2 (p/mile)', 'FuelCost']]
                   scaler = StandardScaler()
                   X_scaled = scaler.fit_transform(X)
                   # Hacemos las predicciones con el modelo 
                   predicciones = modelo_ML1.predict(X_scaled)
                   # A침adimos las predicciones al dataframe
                   Vehiculos_filtrado['Eficiencia'] = predicciones
                   # Ordenas por eficiencia de mayor a menor
                   vehiculos_recomendados = Vehiculos_filtrado.sort_values(by='Eficiencia', ascending=False).head(5)
                   st.session_state['dataset'] = vehiculos_recomendados
                   # Mostrar los 5 veh칤culos recomendados 
                   st.write('Los 5 veh칤culos mas eficientes energeticamente son:')
                   st.dataframe(vehiculos_recomendados[['Year', 'Veh칤culo_unico']])
             else: 
                   st.write('No se encontraron veh칤culos que cumplan con ese citerio')
        # Condici칩n si solo elige a침o
        elif a침o != 'Todos' and fabricante == 'Todos':
              # Filtrar vehiculos por a침o 
              Vehiculos_filtrado = df_Vehiculos_F[df_Vehiculos_F['Year'] == a침o]
              # Verificar si hay veh칤culos que cumplar con esta condici칩n 
              if len(Vehiculos_filtrado) > 0:
                    #Estandarizamos las caracteristicas
                    X = Vehiculos_filtrado[['Year', 'Miles per gallon (mpg)', 'CO2 (p/mile)', 'FuelCost']]
                    scaler = StandardScaler()
                    X_scaled = scaler.fit_transform(X)
                    # Hacemos las predicciones con el modelo 
                    predicciones = modelo_ML1.predict(X_scaled)
                    # A침adimos las predicciones al dataframe
                    Vehiculos_filtrado['Eficiencia'] = predicciones
                    # Ordenas por eficiencia de mayor a menor
                    vehiculos_recomendados = Vehiculos_filtrado.sort_values(by='Eficiencia', ascending=False).head(5)
                    st.session_state['dataset'] = vehiculos_recomendados
                    # Mostrar los 5 veh칤culos recomendados 
                    st.write('Los 5 veh칤culos mas eficientes energeticamente son:')
                    st.dataframe(vehiculos_recomendados[['Year', 'Veh칤culo_unico']])
              else: 
                    st.write('No se encontraron veh칤culos que cumplan con ese citerio')
        else:
              # Sin filtro
              Vehiculos_filtrado = df_Vehiculos_F
              # Verificar si hay veh칤culos que cumplar con esta condici칩n 
              if len(Vehiculos_filtrado) > 0:
                   #Estandarizamos las caracteristicas
                   X = Vehiculos_filtrado[['Year', 'Miles per gallon (mpg)', 'CO2 (p/mile)', 'FuelCost']]
                   scaler = StandardScaler()
                   X_scaled = scaler.fit_transform(X)
                   # Hacemos las predicciones con el modelo 
                   predicciones = modelo_ML1.predict(X_scaled)
                   # A침adimos las predicciones al dataframe
                   Vehiculos_filtrado['Eficiencia'] = predicciones
                   # Ordenas por eficiencia de mayor a menor
                   vehiculos_recomendados = Vehiculos_filtrado.sort_values(by='Eficiencia', ascending=False).head(5)
                   st.session_state['dataset'] = vehiculos_recomendados
                   # Mostrar los 5 veh칤culos recomendados 
                   st.write('Los 5 veh칤culos mas eficientes energeticamente son:')
                   st.dataframe(vehiculos_recomendados[['Year', 'Veh칤culo_unico']])
              else: 
                   st.write('No se encontraron veh칤culos que cumplan con ese citerio')

    st.title('Costo en칠rgetico por millas')
    if 'dataset' in st.session_state and not st.session_state['dataset'].empty:
         dataset = st.session_state['dataset']
         # Usar las filas como opci칩n m칰ltiple
         Vehiculos = dataset['Veh칤culo_unico'].tolist()
         Vehiculos.insert(0, 'Seleccion')
         seleccion = st.selectbox('Selecciona un veh칤culo:', Vehiculos)
          # Mostrar selecci칩n
         if seleccion != 'Seleccion':
             # Filtrar el dataset para mostrar solo las filas seleccionadas
             seleccionados = dataset[dataset['Veh칤culo_unico'] == seleccion].iloc[0]
             st.write("Detalles del veh칤culo")
             st.write(f"Veh칤culo seleccionado: {seleccionados['Veh칤culo_unico']}")
             st.write(f"Costo de combustible por gal칩n: ${seleccionados['FuelCost']} US")
             st.write(f"Emisiones de CO2 por milla: {seleccionados['CO2 (p/mile)']} g/milla")
             st.write(f"Millas por gal칩n: {seleccionados['Miles per gallon (mpg)']} mpg")
             st.write(f"Categoria del veh칤culo: {seleccionados['Categoria']}")
             st.write(f"Modelo: {seleccionados['Year']}")

             # Insertar una imagen del veh칤culo
             # URL de la imagen (ejemplo)
             image_url = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTAynn1hP5HC3WnHtWHmrcMPpzVRpkYq9ZWQg&s"
             # Mostrar la imagen desde la URL con un caption din치mico basado en el veh칤culo seleccionado
             st.image(image_url, caption=f"Imagen del veh칤culo: {seleccionados['Veh칤culo_unico']}", width=400)

             # Pedir al usuario que ingrese la cantidad de Kilometros
             st.write('**Consumo energetico por kilometros**')
             Kilometros = st.number_input('Ingresa la cantidad de Kilometros', min_value=0, max_value=1000000)
             # Realizar c치lculos
             Km_por_Litro = seleccionados['Miles per gallon (mpg)'] * 0.425144
             # Convertir CO2 por milla a CO2 por kil칩metro
             co2_total_km = seleccionados['CO2 (p/mile)'] / 1.60934
             # Hacemos calculos
             combustible_usado = Kilometros / Km_por_Litro  # Cantidad de litros por kilometro
             costo_total_combustible = combustible_usado * seleccionados['FuelCost']  # Costo total de combustible
             CO2_total = Kilometros * co2_total_km  # Emisiones de CO2 totales
             # Mostrar los resultados
             st.write(f"Para {Kilometros} kilometros, el veh칤culo {seleccionados['Veh칤culo_unico']} gastar치:")
             st.write(f"- {combustible_usado:.2f} litros de combustible")
             st.write(f"- Un costo total de combustible de ${costo_total_combustible:.2f} US")
             st.write(f"- Emitir치 un total de {CO2_total:.2f} gramos de CO2")
         else:
             st.write('No se a elegido veh칤culo')
    else:
        st.write("No se ha generado ninguna recomendaci칩n")
# Opci칩n para el modelo 2
elif st.session_state.page == 'Costo_O':
     st.write("Modelo 2")