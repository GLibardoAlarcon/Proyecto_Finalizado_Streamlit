import streamlit as st
import pandas as pd
import plotly.express as px
import streamlit as st
import acercaDe  # Importar la p치gina 'home.py'
import dashboard  # Importar la p치gina 'dashboard.py'
import modelos  # Importar la p치gina 'modelos_ml.py'
import inicio # Importar la p치gina 'inicio.py'
import base64

# Definir funci칩n principal para manejar pesta침as
def dashboard_page():
    
# Estilo CSS para ocultar la barra lateral
    

    # Encabezado principal con formato
    st.markdown("""
    # Presentaci칩n Interactiva de An치lisis de Datos 游늵
    Este dashboard interactivo presenta diferentes an치lisis relacionados con precios de reventa de autos, viajes en taxis amarillos, costos operacionales de veh칤culos y KPIs relacionados con eficiencia y costos.
    Navega por los diferentes an치lisis para explorar las gr치ficas y an치lisis asociados. Utiliza el men칰 lateral para seleccionar y visualizar cada uno.
    """, unsafe_allow_html=True)

    # Sidebar para la selecci칩n de an치lisis (pesta침as)
    st.sidebar.header("Selecciona un An치lisis:")
    analisis = st.sidebar.selectbox(
        'Selecciona el an치lisis',
        ('An치lisis de Precios de Reventa de Autos', 
         'An치lisis de Viajes en Taxis Amarillos', 
         'An치lisis de Costos Operacionales de Veh칤culos',
         'KPIs de Eficiencia y Costos Operacionales')
    )

    # Cargar los datasets utilizando rutas relativas
    try:
        df_car_resale = pd.read_csv('./Data/car_resale_prices_clean.csv')
        df_yellow_taxi = pd.read_parquet('./Data/yellow_tripdata.parquet')
        df_vehicle_costs = pd.read_csv('./Data/costo_operacional_vehiculos_clean.csv')
        st.success("Datasets cargados correctamente")
    except Exception as e:
        st.error(f"Error al cargar los datasets: {e}")

    # Secci칩n 1: An치lisis de Precios de Reventa de Autos
    if analisis == 'An치lisis de Precios de Reventa de Autos':
        st.header('游늳 An치lisis de Precios de Reventa de Autos')
        st.markdown("""
        Descripci칩n: Este an치lisis muestra la distribuci칩n de los precios de reventa de autos por a침o de registro y permite filtrar autos seg칰n el presupuesto.
        """)

        # Crear una nueva columna para agrupar los a침os en rangos de 5 a침os
        df_car_resale['Year_Category'] = pd.cut(df_car_resale['Registered_Year'],
                                                bins=[1990, 1995, 2000, 2005, 2010, 2015, 2020],
                                                labels=['1990-1995', '1996-2000', '2001-2005', '2006-2010', '2011-2015', '2016-2020'])

        # Layout mejorado: Usamos columnas para mostrar gr치ficas y filtros
        col1, col2 = st.columns([2, 1])

        with col1:
            st.subheader("Distribuci칩n de Precios de Reventa por A침o de Registro")
            fig = px.box(df_car_resale, x='Registered_Year', y='Resale_Price', title="Distribuci칩n de Precios de Reventa por A침o de Registro")
            fig.update_xaxes(title_text="A침o de Registro")
            fig.update_yaxes(title_text="Precio de Reventa (USD)")
            st.plotly_chart(fig)

        with col2:
            st.subheader("Filtrar autos por presupuesto")
            presupuesto_cliente = st.number_input("Ingresa tu presupuesto (USD)", min_value=0, value=5000, step=1000)
            autos_recomendados = df_car_resale[df_car_resale['Resale_Price'] <= presupuesto_cliente].sort_values(by='Resale_Price').head(5)
            
            if not autos_recomendados.empty:
                st.markdown(f"### Autos recomendados dentro del presupuesto de ${presupuesto_cliente}:")
                st.dataframe(autos_recomendados[['Full_Name', 'Registered_Year', 'Resale_Price']])
            else:
                st.text(f"No se encontraron autos dentro del presupuesto de ${presupuesto_cliente}.")

    # Secci칩n 2: An치lisis de Viajes en Taxis Amarillos
    elif analisis == 'An치lisis de Viajes en Taxis Amarillos':
        st.header('游뚯 An치lisis de Viajes en Taxis Amarillos')
        st.markdown("""
        Descripci칩n: Este an치lisis muestra la cantidad de viajes realizados por taxis amarillos a lo largo del tiempo.
        """)

        grafico_taxis = st.selectbox(
            'Selecciona la gr치fica para Viajes en Taxis Amarillos',
            ('Cantidad de Viajes por A침o', 'Distancia vs Duraci칩n del Viaje')
        )

        if grafico_taxis == 'Cantidad de Viajes por A침o':
            st.subheader("Cantidad de Viajes por A침o")
            df_yellow_taxi['pickup_year'] = pd.to_datetime(df_yellow_taxi['pickup_datetime']).dt.year
            fig = px.histogram(df_yellow_taxi, x='pickup_year', title="Cantidad de Viajes por A침o")
            fig.update_xaxes(title_text="A침o")
            fig.update_yaxes(title_text="N칰mero de Viajes")
            st.plotly_chart(fig)
        
        elif grafico_taxis == 'Distancia vs Duraci칩n del Viaje':
            st.subheader("Relaci칩n entre Distancia y Duraci칩n del Viaje")
            fig = px.scatter(df_yellow_taxi, x='trip_distance', y='trip_duration', title="Distancia vs Duraci칩n del Viaje")
            fig.update_xaxes(title_text="Distancia del Viaje (millas)")
            fig.update_yaxes(title_text="Duraci칩n del Viaje (minutos)")
            st.plotly_chart(fig)

    # Secci칩n 3: An치lisis de Costos Operacionales de Veh칤culos
    elif analisis == 'An치lisis de Costos Operacionales de Veh칤culos':
        st.header('游뚱 An치lisis de Costos Operacionales de Veh칤culos')
        st.markdown("""
        Descripci칩n: Este an치lisis muestra los costos operacionales de veh칤culos seg칰n su tipo de combustible.
        """)

        # Selecci칩n de la gr치fica para mostrar
        grafico_costos = st.selectbox(
            'Selecciona la gr치fica para Costos Operacionales',
            ('Costos Operacionales por Tipo de Combustible',)
        )

        if grafico_costos == 'Costos Operacionales por Tipo de Combustible':
            st.subheader("Costos Operacionales por Tipo de Combustible")
            fig = px.bar(df_vehicle_costs, x='Fuel_Type', y='Fuel_Cost', title="Costos Operacionales por Tipo de Combustible")
            fig.update_xaxes(title_text="Tipo de Combustible")
            fig.update_yaxes(title_text="Costo de Combustible (GBP)")
            st.plotly_chart(fig)

            # Comparaci칩n de tipos de combustible
            st.subheader("Comparaci칩n de Costos de Combustibles")
            fuel_comparison = df_vehicle_costs.groupby('Fuel_Type')['Fuel_Cost'].mean().reset_index()
            st.table(fuel_comparison)

    # Secci칩n 4: KPIs de Eficiencia y Costos Operacionales
    elif analisis == 'KPIs de Eficiencia y Costos Operacionales':
        st.header('游늵 KPIs de Eficiencia y Costos Operacionales')
        st.markdown("""
        Descripci칩n: Este an치lisis presenta los KPIs relacionados con las emisiones de CO2 y los costos operacionales por tipo de veh칤culo.
        """)

        col1, col2 = st.columns(2)

        # Gr치fico CO2 por milla
        with col1:
            st.subheader("CO2 por milla para cada a침o")
            df_convecional_filtrado = df_vehicle_costs[df_vehicle_costs['CO2 (p/mile)'] > 0]
            fig = px.line(df_convecional_filtrado, x='Year', y='CO2 (p/mile)', title='CO2 por milla para cada a침o')
            fig.update_xaxes(title_text='A침os')
            fig.update_yaxes(title_text='CO2 por milla')
            st.plotly_chart(fig)
        
        # Comparaci칩n de costos operativos
        with col2:
            st.subheader("Comparaci칩n de Costos Operativos por Tipo de Veh칤culo")
            fig = px.histogram(df_vehicle_costs, x="Total_Cost", color="Fuel_Type", barmode="overlay", nbins=50, title="Comparaci칩n de la Distribuci칩n de Costos Operativos por Tipo de Veh칤culo")
            fig.update_xaxes(title_text="Costo Total (USD)")
            fig.update_yaxes(title_text="Frecuencia")
            st.plotly_chart(fig)
